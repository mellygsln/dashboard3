import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Function to load data
@st.cache_data
def load_data():
    hour_data = pd.read_csv('hour.csv')
    day_data = pd.read_csv('day.csv')
    return hour_data, day_data

# Load data
hour_data, day_data = load_data()

# Ensure the 'dteday' column is datetime
hour_data['dteday'] = pd.to_datetime(hour_data['dteday'])
day_data['dteday'] = pd.to_datetime(day_data['dteday'])

# Title and introductory markdown
st.title("Data Analysis of Bike-Sharing")

st.markdown("""
Bike sharing systems are new generation of traditional bike rentals where the whole process from membership, rental, and return back has become automatic. Through these systems, users are able to easily rent a bike from a particular position and return it at another position. Currently, there are about over 500 bike-sharing programs around the world which is composed of over 500 thousand bicycles. Today, there exists great interest in these systems due to their important role in traffic, environmental, and health issues.

Apart from interesting real-world applications of bike sharing systems, the characteristics of data being generated by these systems make them attractive for research. Opposed to other transport services such as bus or subway, the duration of travel, departure, and arrival position is explicitly recorded in these systems. This feature turns bike sharing systems into a virtual sensor network that can be used for sensing mobility in the city. Hence, it is expected that most of the important events in the city could be detected via monitoring these data.
""")

# Dataset selection
dataset_option = st.selectbox("Choose dataset to display:", ["Hour Data", "Day Data"])

if dataset_option == "Day Data":
    # Display daily data
    st.subheader("Daily Bike Rental Data")
    st.dataframe(day_data)

    # Show descriptive statistics for the daily dataset
    st.subheader("Descriptive Statistics of Daily Rentals")
    st.write(day_data.describe(include='all'))

    # Add a new column for 'cnt_range' to categorize rental counts
    bins = [0, 22, 100, 500, 1000, 5000, 8714]
    labels = ['0-22', '23-100', '101-500', '501-1000', '1001-5000', '5001-8714']
    day_data['cnt_range'] = pd.cut(day_data['cnt'], bins=bins, labels=labels, right=True)

    # Group by 'cnt_range' and display statistics
    st.subheader("Grouped Data by Rental Count Range")
    result = day_data.groupby('cnt_range').agg({
        'atemp': ['max', 'min', 'mean', 'std'],
        'hum': ['max', 'min', 'mean', 'std'],
        'windspeed': ['max', 'min', 'mean', 'std'],
        'cnt': ['max', 'min', 'mean', 'std']
    })
    st.write(result)

    # Visualize bike rentals over time (lineplot)
    st.subheader("Bike Rentals Over Time (Daily)")
    plt.figure(figsize=(10, 5))
    sns.lineplot(x='dteday', y='cnt', data=day_data)
    plt.title("Bike Rentals Over Time (Daily)")
    plt.xlabel("Date")
    plt.ylabel("Total Rentals")
    plt.xticks(rotation=45)
    st.pyplot(plt)

    # Scatter plots for features against 'cnt'
    st.subheader("Scatterplots of Features vs Rentals")
    features = ['temp', 'atemp', 'hum', 'windspeed']
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    for i, feature in enumerate(features):
        ax = axes[i // 2, i % 2]
        sns.regplot(x=feature, y='cnt', data=day_data, ax=ax, line_kws={"color": "red"})
        correlation = np.corrcoef(day_data[feature], day_data['cnt'])[0, 1]
        ax.set_title(f'{feature.capitalize()} vs Rentals (Correlation: {correlation:.2f})')
        ax.set_xlabel(feature.capitalize())
        ax.set_ylabel('Total Rentals')
    plt.tight_layout()
    st.pyplot(fig)

elif dataset_option == "Hour Data":
    # Display hourly data
    st.subheader("Hourly Bike Rental Data")
    st.dataframe(hour_data)

    # Show descriptive statistics for the hourly dataset
    st.subheader("Descriptive Statistics of Hourly Rentals")
    st.write(hour_data.describe(include='all'))

    # Grouped statistics for rentals per hour
    st.subheader("Hourly Rentals Grouped Statistics")
    hourly_stats = hour_data.groupby(by="hr").agg({
        "cnt": ["max", "min", "mean", "std"]
    })
    st.write(hourly_stats)

    # Bar plot for total rentals per hour
    st.subheader("Total Bike Rentals per Hour (Bar Plot)")
    hourly_rentals = hour_data.groupby('hr')['cnt'].sum()
    plt.figure(figsize=(10, 5))
    plt.bar(hourly_rentals.index, hourly_rentals.values)
    plt.title('Total Bike Rentals per Hour')
    plt.xlabel('Hour of the Day')
    plt.ylabel('Total Rentals')
    st.pyplot(plt)

    # Line plot for total rentals per hour
    st.subheader("Total Bike Rentals per Hour (Line Plot)")
    plt.figure(figsize=(10, 5))
    plt.plot(hourly_rentals.index, hourly_rentals.values, marker='o')
    plt.title('Total Bike Rentals per Hour')
    plt.xlabel('Hour of the Day')
    plt.ylabel('Total Rentals')
    plt.grid(True)
    st.pyplot(plt)

# Sidebar for additional information
st.sidebar.header("Column Information")
st.sidebar.write("""
- **instant**: record index
- **dteday**: date
- **season**: season (1:spring, 2:summer, 3:fall, 4:winter)
- **yr**: year (0: 2011, 1: 2012)
- **mnth**: month (1 to 12)
- **hr**: hour (0 to 23, only in hour.csv)
- **holiday**: whether the day is a holiday
- **weekday**: day of the week
- **workingday**: whether the day is a working day
- **weathersit**: weather condition
- **temp**: normalized temperature in Celsius
- **atemp**: normalized feeling temperature in Celsius
- **hum**: humidity
- **windspeed**: wind speed
- **casual**: number of casual users
- **registered**: number of registered users
- **cnt**: total rentals
""")
